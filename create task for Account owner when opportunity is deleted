public class OpportunityHandler{
    public static void oppAfterUpdateHandler(List<Opportunity> oppList){
        Set<Id> ownerIds= new Set<Id>();
        List<Task> tasks = new List<Task>();
        for(Opportunity opp: oppList){
            if(opp.stageName=='Closed Won'){
                ownerIds.add(opp.ownerId);
            }
            if(ownerIds.size()>0){
                for(Id owner:ownerIds){
                    tasks.add(new task(ownerid=owner,
                                       Subject='Split Revenue with team for '+opp.Name,
                                       WhatId=opp.Id));
                }
                
            }
            
        }
        insert tasks;
        
    }
   
    public static void oppBeforeUpdateHandler(List<opportunity> newRecords,Map<Id,Opportunity> oldMap){
        for(Opportunity opp:newRecords){
            if(oldMap.get(opp.Id).stagename != opp.stageName && opp.Probability !=null && opp.ExpectedRevenue !=null){
                opp.Amount=opp.Probability*opp.ExpectedRevenue/100;
            }
        }
    }
    public static void oppAfterUpdateHandler2(List<Opportunity> oppList){
        /*add acc id to set where it is closed
         * loop through the account id
         * count the aggregate result of the opp closed for the accId
         * update  the description field in the acc with the aggregate result*/
        Set<Id> accIds = new Set<Id>();
        for(Opportunity o:oppList){
        if(o.stageName=='Closed Won'){
            accIds.add(o.AccountId);
        }
        }
        List<AggregateResult> totalOpp=[select count(Id) totalWon,accountId from opportunity
                                       where accountId in :accIds
                                       and stageName='Closed Won'
                                       group by accountId];
        List<Account> accList = new List<Account>();
        for(AggregateResult ar :totalOpp){
            Account acc = new Account(Id=String.valueof(ar.get('accountId')),description=String.valueof(ar.get('totalWon')));
            accList.add(acc);
        }
        update accList;
    }
    public static void oppAfterDeleteHandler(List<Opportunity> oldOppRecords){
        
        List<Task> newTasks = new List<Task>();
        
       Map<Id,Id> oppAccMap= new Map<Id,Id>();
        
        Map<Id,Id> accidOwneridMap = new Map<Id,Id>();
        
        Set<Id> accids = new Set<Id>();
        for(Opportunity o:oldOppRecords){
            accids.add(o.AccountId);
            oppAccMap.put(o.Id,o.AccountId);
        }
       List<Account> accRecords=[select Id,ownerId from Account where
                               id in :accids];
        
        for(Account a: accRecords){
           accidOwneridMap.put(a.Id,a.OwnerId) ;
        }
        
        
        for(Opportunity opp:oldOppRecords){
           Task t = new Task(
                            Subject='Please check this deleted Opportunity'+opp.name,
                            ownerId=accidOwneridMap.get(oppAccMap.get(opp.Id)),
                            Priority='High'); 
                             
            newTasks.add(t);
        }
        System.debug('Size of new tasks is '+newTasks.size());
        
        if(!newTasks.isEmpty()){
            insert newTasks;
        }
         
    }
   
}
Trigger
trigger opTrig on Opportunity (after update,before update,after delete) {
    /*create set to hold owner id where oppstageName=='Closed won'
* create a list for task
* if set size is not equal to 0
* create new task by looping through the id
* add to the task list && update task list outside the for loop*/
    
    if(Trigger.isAfter && Trigger.isUpdate){
        OpportunityHandler.oppAfterUpdateHandler(Trigger.new);
        OpportunityHandler.oppAfterUpdateHandler2(Trigger.new);
    }
    
    if(Trigger.isBefore && Trigger.isUpdate){
         
     OpportunityHandler.oppBeforeUpdateHandler(Trigger.new,Trigger.oldmap);
     
        
}
    if(Trigger.isAfter && Trigger.isDelete){
       OpportunityHandler.oppAfterDeleteHandler(Trigger.old);
    }
}
                                                
                                                
