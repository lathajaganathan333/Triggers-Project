public class OpportunityHandler{
    public static void oppAfterUpdateHandler(List<Opportunity> oppList){
        Set<Id> ownerIds= new Set<Id>();
        List<Task> tasks = new List<Task>();
        for(Opportunity opp: oppList){
            if(opp.stageName=='Closed Won'){
                ownerIds.add(opp.ownerId);
            }
            if(ownerIds.size()>0){
                for(Id owner:ownerIds){
                    tasks.add(new task(ownerid=owner,
                                       Subject='Split Revenue with team for '+opp.Name,
                                       WhatId=opp.Id));
                }
                
            }
            
        }
        insert tasks;
        
    }
    
    public static void oppBeforeUpdateHandler(List<opportunity> newRecords,Map<Id,Opportunity> oldMap){
        for(Opportunity opp:newRecords){
            if(oldMap.get(opp.Id).stagename != opp.stageName && opp.Probability !=null && opp.ExpectedRevenue !=null){
                opp.Amount=opp.Probability*opp.ExpectedRevenue/100;
            }
        }
    }
    public static void oppAfterUpdateHandler2(List<Opportunity> oppList){
        /*add acc id to set where it is closed
* loop through the account id
* count the aggregate result of the opp closed for the accId
* update  the description field in the acc with the aggregate result*/
        Set<Id> accIds = new Set<Id>();
        for(Opportunity o:oppList){
            if(o.stageName=='Closed Won'){
                accIds.add(o.AccountId);
            }
        }
        List<AggregateResult> totalOpp=[select count(Id) totalWon,accountId from opportunity
                                        where accountId in :accIds
                                        and stageName='Closed Won'
                                        group by accountId];
        List<Account> accList = new List<Account>();
        for(AggregateResult ar :totalOpp){
            Account acc = new Account(Id=String.valueof(ar.get('accountId')),description=String.valueof(ar.get('totalWon')));
            accList.add(acc);
        }
        update accList;
    }
    public static void oppAfterDeleteHandler(List<Opportunity> oldOppRecords){
        
        List<Task> newTasks = new List<Task>();
        
        Map<Id,Id> oppAccMap= new Map<Id,Id>();
        
        Map<Id,Id> accidOwneridMap = new Map<Id,Id>();
        
        Set<Id> accids = new Set<Id>();
        for(Opportunity o:oldOppRecords){
            accids.add(o.AccountId);
            oppAccMap.put(o.Id,o.AccountId);
        }
        List<Account> accRecords=[select Id,ownerId from Account where
                                  id in :accids];
        
        for(Account a: accRecords){
            accidOwneridMap.put(a.Id,a.OwnerId) ;
        }
        
        
        for(Opportunity opp:oldOppRecords){
            Task t = new Task(
                Subject='Please check this deleted Opportunity'+opp.name,
                ownerId=accidOwneridMap.get(oppAccMap.get(opp.Id)),
                Priority='High'); 
            
            newTasks.add(t);
        }
        System.debug('Size of new tasks is '+newTasks.size());
        
        if(!newTasks.isEmpty()){
            insert newTasks;
        }
        
    }
    public static void removeOppTeamMembers(List<Opportunity> oppList){
        /*when opp is updated at closed lost , add 
*the opp to a set 
*create list for  oppTeamMembers 
*  delete the associated list for  oppTeamMembers */
        
        Set<Id> oppIds = new Set<Id>();
        
        for(Opportunity o:oppList){
            if(o.stageName=='Closed Lost' ){
                oppIds.add(o.Id);
            }
            List<OpportunityTeamMember> teamMembers=[select Id from 
                                                     OpportunityTeamMember where 
                                                     Opportunityid in :OppIds];
            if(teamMembers.size()>0){
                delete teamMembers;
            }
            
            
        }
        
    }
    public static void afterUpdateOppTeam(List<Opportunity> oppList,Map<Id,opportunity> oldMapRecords){
        
        List<User> usr= [select id from user where UserRole.name ='TestNew'
                         and isActive=true];
        List< OpportunityTeamMember> oppMemberList = new List< OpportunityTeamMember>();
        for(Opportunity op : oppList){
            if(op.stageName=='Needs Analysis' && op.stageName !=oldMapRecords.get(op.Id).stageName){
                for(user userRec: usr){
                    OpportunityTeamMember otm= new OpportunityTeamMember();
                    otm.opportunityId=op.Id;
                    otm.opportunityAccessLevel='Edit';
                    otm.UserId=userRec.Id;
                    oppMemberList.add(otm);
                }
                
            }            
            
        }
        if(!oppMemberList.isEmpty()){
            insert  oppMemberList;
        }
    }
    public static void notifyAll(List<Opportunity> newOppRecords,Map<Id,Opportunity> oldOppRecords){
        List<Id> oppIds= new List<Id>();
        List<Id> accountIds = new List<Id>();
        List<Id> publicGroupUsers = new List<Id>();
        List<GroupMember> starGroup=[select Id,userOrGroupId from groupMember where Group.name='Star Group'];
        for(Opportunity opp:newOppRecords){
            oppIds.add(opp.Id);
            accountIds.add(opp.AccountId);
        }
        List<Account> accountOwners=[select Id ,ownerId from Account where Id in :accountIds];
        List<OpportunityTeamMember> oppTeamMembers=[select UserId,opportunityId from OpportunityTeamMember
                                                    where OpportunityId in :oppIds];
        Set<Id> listOfUsersToNotify = new Set<Id>();
        
        for(Opportunity opp:newOppRecords){
            if(opp.stageName=='Closed Won' && oldOppRecords.get(opp.Id).stageName!=opp.StageName){
                listOfUsersToNotify.add(opp.OwnerId);
                listOfUsersToNotify.addAll(publicGroupUsers);
                for(Account acc:accountOwners){
                    if(acc.Id==opp.AccountId){
                        listOfUsersToNotify.add(acc.OwnerId) ; 
                    }
                }
                for(opportunityTeamMember otm:oppTeamMembers){
                    if(otm.opportunityId==opp.Id){
                        listOfUsersToNotify.add(otm.UserId);   
                    }
                }
                for(groupMember gm:starGroup){
                    publicGroupUsers.add(gm.UserOrGroupId);
                }
            }
        }
        if(!listOfUsersToNotify.isEmpty()){
            sendEmailToAllTheseFolks(listOfUsersToNotify);
        }
    }  
    
    public static void sendEmailToAllTheseFolks(Set<Id> userId){
        List<String> emailList= new List<String>();
        List<User> userRecords=[select email from user where Id in :userId];
        for(User userRec:userRecords){
            emailList.add(userRec.Email);
        }
        Messaging.SingleEmailMessage message = new Messaging.SingleEmailMessage();
        
        message.toAddresses = emailList;
        message.optOutPolicy = 'FILTER';
        message.subject = 'Look at this opportunity';
        message.plainTextBody = 'Hi The Phone or Email of your account is changed';
        Messaging.SingleEmailMessage[] messages = 
            new List<Messaging.SingleEmailMessage> {message};
                Messaging.SendEmailResult[] results = Messaging.sendEmail(messages);
        
    }
    
    public static void oppAfterUpdateReminder(List<Opportunity>newOpps,Map<Id,Opportunity> oldRec){
        List<Task> taskList= new List<Task>();
        for(Opportunity opp: newOpps){
            if(opp.stageName !=oldRec.get(opp.Id).stageName &&
               (oldRec.get(opp.Id).stageName=='Perception Analysis' &&
                opp.stageName=='Qualification')){
                    task t= new task(subject='New Task Today!!',
                                     priority='Low',
                                     status='In Progress',
                                     whatId=opp.Id,
                                     reminderDateTime=System.today()+1,
                                     OwnerId=opp.ownerId
                                    );
                    
                    taskList.add(t);
                }
        }
        if(taskList.size()>0){
            insert taskList;
            
        }
    }
}
Trigger
trigger opTrig on Opportunity (after update,before update,after delete) {
    /*create set to hold owner id where oppstageName=='Closed won'
* create a list for task
* if set size is not equal to 0
* create new task by looping through the id
* add to the task list && update task list outside the for loop*/
    
    if(Trigger.isAfter && Trigger.isUpdate){
        OpportunityHandler.oppAfterUpdateHandler(Trigger.new);
        OpportunityHandler.oppAfterUpdateHandler2(Trigger.new);
        OpportunityHandler.removeOppTeamMembers(Trigger.new);
        OpportunityHandler.afterUpdateOppTeam(Trigger.new,Trigger.oldmap);
        OpportunityHandler.notifyAll(Trigger.new,Trigger.oldMap);
         OpportunityHandler.oppAfterUpdateReminder(Trigger.new,Trigger.oldMap);
    }
    
    if(Trigger.isBefore && Trigger.isUpdate){
         
     OpportunityHandler.oppBeforeUpdateHandler(Trigger.new,Trigger.oldmap);
     
        
}
    if(Trigger.isAfter && Trigger.isDelete){
       OpportunityHandler.oppAfterDeleteHandler(Trigger.old);
    }
}
                                                                                  
                                                                                  
